module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { TranslationUnit: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          function(a, b) {
                  return addPositionInfo({type:'Code', val:a, space:b})
                  },
          function(a) {
                  return addPositionInfo({type:'TranslationUnit', lines: a});
              },
          function(a, b) {a.space = b;return a;},
          function(a) {return addPositionInfo({type:'PrepUndef', Identifier:a});},
          null,
          function(a, b) {
              return addPositionInfo({type:'PrepSimpleMacro', Identifier:a, Replacement:b});
          },
          function(a, b, c) {
              return addPositionInfo({type:'PrepFunctionMacro', Identifier:a, Args:b, Replacement:c});
          },
          function(a) {return a;},
          function(a, b) {
              return [a].concat(b);
          },
          function(a, b, c) {
              return {type:'PrepFunctionMacroCall', Identifier:a, Args:b, space:c};
              },
          function(a) {
              var ret = [];
              var lastString = null;
              for (var i=0;i<a.length;i++){
                  if (a[i].type==='Seperator'){
                      if (lastString===null){
                          lastString = a[i];
                      }else{
                          lastString.val += lastString.space + a[i].val;
                          lastString.space = a[i].space;
                      }
                  }else{
                      if (lastString!==null){
                          ret.push(lastString);
                          lastString = null;
                      }
                      ret.push(a[i]);
                  }
              }
              if (lastString!==null)
                  ret.push(lastString);
              return ret;
          },
          function(a) {
              return addPositionInfo({type:'PrepIncludeLib', name:a});
          },
          function(a) {
              return addPositionInfo({type:'PrepIncludeLocal', name:a});
          },
          /^[\/\\.]/,
          { type: "class", value: "[\\/\\\\.]", description: "[\\/\\\\.]" },
          function(a) {return a.join('');},
          function(a) {return addPositionInfo({type:'PrepIfdef', Identifier:a});},
          function(a) {return addPositionInfo({type:'PrepIfndef', Identifier:a});},
          function() {return addPositionInfo({type:'PrepEndif'});},
          function() {return addPositionInfo({type:'PrepElse'});},
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          "define",
          { type: "literal", value: "define", description: "\"define\"" },
          "undef",
          { type: "literal", value: "undef", description: "\"undef\"" },
          "include",
          { type: "literal", value: "include", description: "\"include\"" },
          "ifdef",
          { type: "literal", value: "ifdef", description: "\"ifdef\"" },
          "ifndef",
          { type: "literal", value: "ifndef", description: "\"ifndef\"" },
          "endif",
          { type: "literal", value: "endif", description: "\"endif\"" },
          "else",
          { type: "literal", value: "else", description: "\"else\"" },
          function(a) {
                  return a.join('');
                },
          /^[ \t\x0B\f]/,
          { type: "class", value: "[ \\t\\x0B\\f]", description: "[ \\t\\x0B\\f]" },
          /^[ \n\r\t\x0B\f]/,
          { type: "class", value: "[ \\n\\r\\t\\x0B\\f]", description: "[ \\n\\r\\t\\x0B\\f]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          void 0,
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          function(a) {return '';},
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          "auto",
          { type: "literal", value: "auto", description: "\"auto\"" },
          "break",
          { type: "literal", value: "break", description: "\"break\"" },
          "case",
          { type: "literal", value: "case", description: "\"case\"" },
          "char",
          { type: "literal", value: "char", description: "\"char\"" },
          "const",
          { type: "literal", value: "const", description: "\"const\"" },
          "continue",
          { type: "literal", value: "continue", description: "\"continue\"" },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          "double",
          { type: "literal", value: "double", description: "\"double\"" },
          "do",
          { type: "literal", value: "do", description: "\"do\"" },
          "enum",
          { type: "literal", value: "enum", description: "\"enum\"" },
          "extern",
          { type: "literal", value: "extern", description: "\"extern\"" },
          "float",
          { type: "literal", value: "float", description: "\"float\"" },
          "for",
          { type: "literal", value: "for", description: "\"for\"" },
          "goto",
          { type: "literal", value: "goto", description: "\"goto\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          "int",
          { type: "literal", value: "int", description: "\"int\"" },
          "inline",
          { type: "literal", value: "inline", description: "\"inline\"" },
          "long",
          { type: "literal", value: "long", description: "\"long\"" },
          "register",
          { type: "literal", value: "register", description: "\"register\"" },
          "restrict",
          { type: "literal", value: "restrict", description: "\"restrict\"" },
          "return",
          { type: "literal", value: "return", description: "\"return\"" },
          "short",
          { type: "literal", value: "short", description: "\"short\"" },
          "signed",
          { type: "literal", value: "signed", description: "\"signed\"" },
          "sizeof",
          { type: "literal", value: "sizeof", description: "\"sizeof\"" },
          "static",
          { type: "literal", value: "static", description: "\"static\"" },
          "struct",
          { type: "literal", value: "struct", description: "\"struct\"" },
          "switch",
          { type: "literal", value: "switch", description: "\"switch\"" },
          "typedef",
          { type: "literal", value: "typedef", description: "\"typedef\"" },
          "union",
          { type: "literal", value: "union", description: "\"union\"" },
          "unsigned",
          { type: "literal", value: "unsigned", description: "\"unsigned\"" },
          "void",
          { type: "literal", value: "void", description: "\"void\"" },
          "volatile",
          { type: "literal", value: "volatile", description: "\"volatile\"" },
          "while",
          { type: "literal", value: "while", description: "\"while\"" },
          "_Bool",
          { type: "literal", value: "_Bool", description: "\"_Bool\"" },
          "_Complex",
          { type: "literal", value: "_Complex", description: "\"_Complex\"" },
          "_stdcall",
          { type: "literal", value: "_stdcall", description: "\"_stdcall\"" },
          "__declspec",
          { type: "literal", value: "__declspec", description: "\"__declspec\"" },
          "__attribute__",
          { type: "literal", value: "__attribute__", description: "\"__attribute__\"" },
          "_Imaginary",
          { type: "literal", value: "_Imaginary", description: "\"_Imaginary\"" },
          function(a, b, c) {
              return {type: 'Identifier', val:a+b.join(''), space:c}
          },
          /^[\r\n,)]/,
          { type: "class", value: "[\\r\\n,)]", description: "[\\r\\n,)]" },
          function(a, b) {
              return {type: 'Seperator', val:a, space:b}
          },
          /^[\r\n]/,
          { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[_]/,
          { type: "class", value: "[_]", description: "[_]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          "\\u",
          { type: "literal", value: "\\u", description: "\"\\\\u\"" },
          function(a) {return String.fromCharCode(a);},
          "\\U",
          { type: "literal", value: "\\U", description: "\"\\\\U\"" },
          function(a) {
              return parseInt(a.join(''),16);
          },
          /^[a-f]/,
          { type: "class", value: "[a-f]", description: "[a-f]" },
          /^[A-F]/,
          { type: "class", value: "[A-F]", description: "[A-F]" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          /^[=]/,
          { type: "class", value: "[=]", description: "[=]" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          { type: "any", description: "any character" }
        ],

        peg$bytecode = [
          peg$decode("!7<+\x8D$ !7!*> \"!7)+3$7<+)%4\"6\"\"\"! %$\"#  \"#  +G$,D&7!*> \"!7)+3$7<+)%4\"6\"\"\"! %$\"#  \"#  \"\"\"  +2%7x+(%4#6##!!%$##  $\"#  \"#  "),
          peg$decode("!7\"*) \"7**# \"7.+3$7<+)%4\"6$\"\"! %$\"#  \"#  "),
          peg$decode("7%*) \"7$*# \"7#"),
          peg$decode("!73+<$75+2%7i+(%4#6%#! %$##  $\"#  \"#  "),
          peg$decode("!73+M$74+C%7i+9%7)*# \" &+)%4$6'$\"! %$$#  $##  $\"#  \"#  "),
          peg$decode("!73+R$74+H%7i+>%7&+4%7)+*%4%6(%#\"! %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7r+\x83$7i+y% !!7t+2$7i+(%4\"6)\"! %$\"#  \"#  ,=&!7t+2$7i+(%4\"6)\"! %$\"#  \"#  \"+3%7s+)%4$6*$\"\"!%$$#  $##  $\"#  \"#  "),
          peg$decode("!7r+\x83$7(+y% !!7t+2$7(+(%4\"6)\"! %$\"#  \"#  ,=&!7t+2$7(+(%4\"6)\"! %$\"#  \"#  \"+3%7s+)%4$6*$\"\"!%$$#  $##  $\"#  \"#  "),
          peg$decode("! !!7i+>$7'+4%7;+*%4#6+##\"! %$##  $\"#  \"#  *) \"7i*# \"7j+X$,U&!7i+>$7'+4%7;+*%4#6+##\"! %$##  $\"#  \"#  *) \"7i*# \"7j\"\"\"  +' 4!6,!! %"),
          peg$decode("! !!7i+>$7'+4%7;+*%4#6+##\"! %$##  $\"#  \"#  *) \"7i*# \"7k+X$,U&!7i+>$7'+4%7;+*%4#6+##\"! %$##  $\"#  \"#  *) \"7i*# \"7k\"\"\"  +' 4!6,!! %"),
          peg$decode("7+*# \"7,"),
          peg$decode("!73+P$76+F%7u+<%7-+2%7v+(%4%6-%!!%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!73+P$76+F%7w+<%7-+2%7w+(%4%6.%!!%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("! !7m*) \"0/\"\"1!30+2$,/&7m*) \"0/\"\"1!30\"\"\"  +' 4!61!! %"),
          peg$decode("7/*/ \"70*) \"71*# \"72"),
          peg$decode("!73+<$77+2%7i+(%4#62#! %$##  $\"#  \"#  "),
          peg$decode("!73+<$78+2%7i+(%4#63#! %$##  $\"#  \"#  "),
          peg$decode("!73+1$79+'%4\"64\" %$\"#  \"#  "),
          peg$decode("!73+1$7:+'%4\"65\" %$\"#  \"#  "),
          peg$decode("!.6\"\"2637+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.8\"\"2839+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.:\"\"2:3;+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.<\"\"2<3=+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.>\"\"2>3?+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.@\"\"2@3A+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.B\"\"2B3C+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("!.D\"\"2D3E+-$7;+#%'\"%$\"#  \"#  "),
          peg$decode("! !7=*) \"7?*# \"7@,/&7=*) \"7?*# \"7@\"+' 4!6F!! %"),
          peg$decode("! !7>*) \"7?*# \"7@,/&7>*) \"7?*# \"7@\"+' 4!6F!! %"),
          peg$decode("!0G\"\"1!3H+' 4!6)!! %"),
          peg$decode("!0I\"\"1!3J+' 4!6)!! %"),
          peg$decode("!.K\"\"2K3L+\x9C$ !!!8.N\"\"2N3O9*$$\"\" M\"#  +-$7y+#%'\"%$\"#  \"#  ,L&!!8.N\"\"2N3O9*$$\"\" M\"#  +-$7y+#%'\"%$\"#  \"#  \"+8%.N\"\"2N3O+(%4#6P#!!%$##  $\"#  \"#  "),
          peg$decode("!.Q\"\"2Q3R+\x8C$ !!!8.S\"\"2S3T9*$$\"\" M\"#  +-$7y+#%'\"%$\"#  \"#  ,L&!!8.S\"\"2S3T9*$$\"\" M\"#  +-$7y+#%'\"%$\"#  \"#  \"+(%4\"6P\"! %$\"#  \"#  "),
          peg$decode("!.U\"\"2U3V+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.W\"\"2W3X+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.Y\"\"2Y3Z+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.[\"\"2[3\\+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.]\"\"2]3^+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!._\"\"2_3`+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.a\"\"2a3b+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.c\"\"2c3d+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.e\"\"2e3f+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.D\"\"2D3E+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.g\"\"2g3h+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.i\"\"2i3j+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.k\"\"2k3l+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.m\"\"2m3n+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.o\"\"2o3p+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.q\"\"2q3r+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.s\"\"2s3t+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.u\"\"2u3v+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.w\"\"2w3x+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.y\"\"2y3z+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.{\"\"2{3|+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.}\"\"2}3~+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\"\"23\x80+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x81\"\"2\x813\x82+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x83\"\"2\x833\x84+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x85\"\"2\x853\x86+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x87\"\"2\x873\x88+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x89\"\"2\x893\x8A+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8B\"\"2\x8B3\x8C+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8D\"\"2\x8D3\x8E+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8F\"\"2\x8F3\x90+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x91\"\"2\x913\x92+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x93\"\"2\x933\x94+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x95\"\"2\x953\x96+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x97\"\"2\x973\x98+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x99\"\"2\x993\x9A+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x9B\"\"2\x9B3\x9C+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x9D\"\"2\x9D3\x9E+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x9F\"\"2\x9F3\xA0+J$!87m9*$$\"\" M\"#  +2%7<+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.U\"\"2U3V*\u01F1 \".W\"\"2W3X*\u01E5 \".Y\"\"2Y3Z*\u01D9 \".[\"\"2[3\\*\u01CD \".]\"\"2]3^*\u01C1 \"._\"\"2_3`*\u01B5 \".a\"\"2a3b*\u01A9 \".c\"\"2c3d*\u019D \".e\"\"2e3f*\u0191 \".D\"\"2D3E*\u0185 \".g\"\"2g3h*\u0179 \".i\"\"2i3j*\u016D \".k\"\"2k3l*\u0161 \".m\"\"2m3n*\u0155 \".o\"\"2o3p*\u0149 \".q\"\"2q3r*\u013D \".s\"\"2s3t*\u0131 \".u\"\"2u3v*\u0125 \".w\"\"2w3x*\u0119 \".y\"\"2y3z*\u010D \".{\"\"2{3|*\u0101 \".}\"\"2}3~*\xF5 \".\"\"23\x80*\xE9 \".\x81\"\"2\x813\x82*\xDD \".\x83\"\"2\x833\x84*\xD1 \".\x85\"\"2\x853\x86*\xC5 \".\x87\"\"2\x873\x88*\xB9 \".\x89\"\"2\x893\x8A*\xAD \".\x8B\"\"2\x8B3\x8C*\xA1 \".\x8D\"\"2\x8D3\x8E*\x95 \".\x8F\"\"2\x8F3\x90*\x89 \".\x91\"\"2\x913\x92*} \".\x93\"\"2\x933\x94*q \".\x95\"\"2\x953\x96*e \".\x97\"\"2\x973\x98*Y \".\x99\"\"2\x993\x9A*M \".\xA1\"\"2\xA13\xA2*A \".\x9B\"\"2\x9B3\x9C*5 \".\x9D\"\"2\x9D3\x9E*) \".\x9F\"\"2\x9F3\xA0+@$!87m9*$$\"\" M\"#  +(%4\"6)\"!!%$\"#  \"#  "),
          peg$decode("!!87h9*$$\"\" M\"#  +P$7l+F% !7m,#&7m\"+4%7;+*%4$6\xA3$#\"! %$$#  $##  $\"#  \"#  "),
          peg$decode("!7h*i \"!!87l9*$$\"\" M\"#  +P$!80\xA4\"\"1!3\xA59*$$\"\" M\"#  +2%7y+(%4#6)#! %$##  $\"#  \"#  +3$7;+)%4\"6\xA6\"\"! %$\"#  \"#  "),
          peg$decode("!7h*i \"!!87l9*$$\"\" M\"#  +P$!80\xA7\"\"1!3\xA89*$$\"\" M\"#  +2%7y+(%4#6)#! %$##  $\"#  \"#  +3$7;+)%4\"6\xA6\"\"! %$\"#  \"#  "),
          peg$decode("0\xA9\"\"1!3\xAA*; \"0\xAB\"\"1!3\xAC*/ \"0\xAD\"\"1!3\xAE*# \"7n"),
          peg$decode("0\xA9\"\"1!3\xAA*G \"0\xAB\"\"1!3\xAC*; \"0\xAF\"\"1!3\xB0*/ \"0\xAD\"\"1!3\xAE*# \"7n"),
          peg$decode("!.\xB1\"\"2\xB13\xB2+2$7p+(%4\"6\xB3\"! %$\"#  \"#  *C \"!.\xB4\"\"2\xB43\xB5+2$7o+(%4\"6\xB3\"! %$\"#  \"#  "),
          peg$decode("!!7q+i$7q+_%7q+U%7q+K%7q+A%7q+7%7q+-%7q+#%'(%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  +' 4!6\xB6!! %"),
          peg$decode("!!7q+A$7q+7%7q+-%7q+#%'$%$$#  $##  $\"#  \"#  +' 4!6\xB6!! %"),
          peg$decode("0\xB7\"\"1!3\xB8*5 \"0\xB9\"\"1!3\xBA*) \"0\xAF\"\"1!3\xB0"),
          peg$decode("!.\xBB\"\"2\xBB3\xBC+2$7;+(%4\"6)\"!!%$\"#  \"#  "),
          peg$decode("!.\xBD\"\"2\xBD3\xBE+2$7;+(%4\"6)\"!!%$\"#  \"#  "),
          peg$decode("!.\xBF\"\"2\xBF3\xC0+2$7;+(%4\"6)\"!!%$\"#  \"#  "),
          peg$decode("!.\xC1\"\"2\xC13\xC2+P$!80\xC3\"\"1!3\xC49*$$\"\" M\"#  +2%7;+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\xC5\"\"2\xC53\xC6+P$!80\xC3\"\"1!3\xC49*$$\"\" M\"#  +2%7;+(%4#6)#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\xC7\"\"2\xC73\xC8+2$7;+(%4\"6)\"!!%$\"#  \"#  "),
          peg$decode("!87y9*$$\"\" M\"#  "),
          peg$decode("-\"\"1!3\xC9")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


    function addPositionInfo(r){
        var posDetails = peg$computePosDetails(peg$currPos);
        r.line = posDetails.line;
        r.column = posDetails.column;
        r.begin = peg$reportedPos;
        r.end = peg$currPos;
        return r;
    }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
