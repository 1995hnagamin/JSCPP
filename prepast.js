module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { TranslationUnit: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          function(a, b) {
                  return addPositionInfo({type:'Code', val:a, space:b})
                  },
          function(a) {
                  return addPositionInfo({type:'TranslationUnit', lines: a});
              },
          function(a, b) {a.space = b;return a;},
          null,
          function(a, b) {
              return addPositionInfo({type:'PrepSimpleMacro', Identifier:a, Replacement:b});
          },
          function(a, b, c) {
              return addPositionInfo({type:'PrepFunctionMacro', Identifier:a, Args:b, Replacement:c});
          },
          function(a) {return a;},
          function(a, b) {
              return [a].concat(b);
          },
          function(a, b, c) {
              return {type:'PrepFunctionMacroCall', Identifier:a, Args:b, space:c};
              },
          function(a) {
              var ret = [];
              var lastString = null;
              for (var i=0;i<a.length;i++){
                  if (a[i].type==='Seperator'){
                      if (lastString===null){
                          lastString = a[i];
                      }else{
                          lastString.val += lastString.space + a[i].val;
                          lastString.space = a[i].space;
                      }
                  }else{
                      if (lastString!==null){
                          ret.push(lastString);
                          lastString = null;
                      }
                      ret.push(a[i]);
                  }
              }
              if (lastString!==null)
                  ret.push(lastString);
              return ret;
          },
          function(a) {
              return addPositionInfo({type:'PrepIncludeLib', name:a});
          },
          function(a) {
              return addPositionInfo({type:'PrepIncludeLocal', name:a});
          },
          /^[\/\\.]/,
          { type: "class", value: "[\\/\\\\.]", description: "[\\/\\\\.]" },
          function(a) {return a.join('');},
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          "define",
          { type: "literal", value: "define", description: "\"define\"" },
          "include",
          { type: "literal", value: "include", description: "\"include\"" },
          "ifdef",
          { type: "literal", value: "ifdef", description: "\"ifdef\"" },
          "ifndef",
          { type: "literal", value: "ifndef", description: "\"ifndef\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          "endif",
          { type: "literal", value: "endif", description: "\"endif\"" },
          "else",
          { type: "literal", value: "else", description: "\"else\"" },
          "elif",
          { type: "literal", value: "elif", description: "\"elif\"" },
          function(a) {
                  return a.join('');
                },
          /^[ \t\x0B\f]/,
          { type: "class", value: "[ \\t\\x0B\\f]", description: "[ \\t\\x0B\\f]" },
          /^[ \n\r\t\x0B\f]/,
          { type: "class", value: "[ \\n\\r\\t\\x0B\\f]", description: "[ \\n\\r\\t\\x0B\\f]" },
          "/*",
          { type: "literal", value: "/*", description: "\"/*\"" },
          void 0,
          "*/",
          { type: "literal", value: "*/", description: "\"*/\"" },
          function(a) {return '';},
          "//",
          { type: "literal", value: "//", description: "\"//\"" },
          "\n",
          { type: "literal", value: "\n", description: "\"\\n\"" },
          "auto",
          { type: "literal", value: "auto", description: "\"auto\"" },
          "break",
          { type: "literal", value: "break", description: "\"break\"" },
          "case",
          { type: "literal", value: "case", description: "\"case\"" },
          "char",
          { type: "literal", value: "char", description: "\"char\"" },
          "const",
          { type: "literal", value: "const", description: "\"const\"" },
          "continue",
          { type: "literal", value: "continue", description: "\"continue\"" },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          "double",
          { type: "literal", value: "double", description: "\"double\"" },
          "do",
          { type: "literal", value: "do", description: "\"do\"" },
          "enum",
          { type: "literal", value: "enum", description: "\"enum\"" },
          "extern",
          { type: "literal", value: "extern", description: "\"extern\"" },
          "float",
          { type: "literal", value: "float", description: "\"float\"" },
          "for",
          { type: "literal", value: "for", description: "\"for\"" },
          "goto",
          { type: "literal", value: "goto", description: "\"goto\"" },
          "int",
          { type: "literal", value: "int", description: "\"int\"" },
          "inline",
          { type: "literal", value: "inline", description: "\"inline\"" },
          "long",
          { type: "literal", value: "long", description: "\"long\"" },
          "register",
          { type: "literal", value: "register", description: "\"register\"" },
          "restrict",
          { type: "literal", value: "restrict", description: "\"restrict\"" },
          "return",
          { type: "literal", value: "return", description: "\"return\"" },
          "short",
          { type: "literal", value: "short", description: "\"short\"" },
          "signed",
          { type: "literal", value: "signed", description: "\"signed\"" },
          "sizeof",
          { type: "literal", value: "sizeof", description: "\"sizeof\"" },
          "static",
          { type: "literal", value: "static", description: "\"static\"" },
          "struct",
          { type: "literal", value: "struct", description: "\"struct\"" },
          "switch",
          { type: "literal", value: "switch", description: "\"switch\"" },
          "typedef",
          { type: "literal", value: "typedef", description: "\"typedef\"" },
          "union",
          { type: "literal", value: "union", description: "\"union\"" },
          "unsigned",
          { type: "literal", value: "unsigned", description: "\"unsigned\"" },
          "void",
          { type: "literal", value: "void", description: "\"void\"" },
          "volatile",
          { type: "literal", value: "volatile", description: "\"volatile\"" },
          "while",
          { type: "literal", value: "while", description: "\"while\"" },
          "_Bool",
          { type: "literal", value: "_Bool", description: "\"_Bool\"" },
          "_Complex",
          { type: "literal", value: "_Complex", description: "\"_Complex\"" },
          "_stdcall",
          { type: "literal", value: "_stdcall", description: "\"_stdcall\"" },
          "__declspec",
          { type: "literal", value: "__declspec", description: "\"__declspec\"" },
          "__attribute__",
          { type: "literal", value: "__attribute__", description: "\"__attribute__\"" },
          "_Imaginary",
          { type: "literal", value: "_Imaginary", description: "\"_Imaginary\"" },
          function(a, b, c) {
              return {type: 'Identifier', val:a+b.join(''), space:c}
          },
          /^[\r\n,)]/,
          { type: "class", value: "[\\r\\n,)]", description: "[\\r\\n,)]" },
          function(a, b) {
              return {type: 'Seperator', val:a, space:b}
          },
          /^[\r\n]/,
          { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[_]/,
          { type: "class", value: "[_]", description: "[_]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          "\\u",
          { type: "literal", value: "\\u", description: "\"\\\\u\"" },
          function(a) {return String.fromCharCode(a);},
          "\\U",
          { type: "literal", value: "\\U", description: "\"\\\\U\"" },
          function(a) {
              return parseInt(a.join(''),16);
          },
          /^[a-f]/,
          { type: "class", value: "[a-f]", description: "[a-f]" },
          /^[A-F]/,
          { type: "class", value: "[A-F]", description: "[A-F]" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          /^[=]/,
          { type: "class", value: "[=]", description: "[=]" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          { type: "any", description: "any character" }
        ],

        peg$bytecode = [
          peg$decode("!7:+\x8D$ !7!*> \"!7(+3$7:+)%4\"6\"\"\"! %$\"#  \"#  +G$,D&7!*> \"!7(+3$7:+)%4\"6\"\"\"! %$\"#  \"#  \"\"\"  +2%7v+(%4#6##!!%$##  $\"#  \"#  "),
          peg$decode("!7\"*) \"7)*# \"7-+3$7:+)%4\"6$\"\"! %$\"#  \"#  "),
          peg$decode("7$*# \"7#"),
          peg$decode("!70+M$71+C%7g+9%7(*# \" %+)%4$6&$\"! %$$#  $##  $\"#  \"#  "),
          peg$decode("!70+R$71+H%7g+>%7%+4%7(+*%4%6'%#\"! %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7p+\x83$7g+y% !!7r+2$7g+(%4\"6(\"! %$\"#  \"#  ,=&!7r+2$7g+(%4\"6(\"! %$\"#  \"#  \"+3%7q+)%4$6)$\"\"!%$$#  $##  $\"#  \"#  "),
          peg$decode("!7p+\x83$7'+y% !!7r+2$7'+(%4\"6(\"! %$\"#  \"#  ,=&!7r+2$7'+(%4\"6(\"! %$\"#  \"#  \"+3%7q+)%4$6)$\"\"!%$$#  $##  $\"#  \"#  "),
          peg$decode("! !!7g+>$7&+4%79+*%4#6*##\"! %$##  $\"#  \"#  *) \"7g*# \"7h+X$,U&!7g+>$7&+4%79+*%4#6*##\"! %$##  $\"#  \"#  *) \"7g*# \"7h\"\"\"  +' 4!6+!! %"),
          peg$decode("! !!7g+>$7&+4%79+*%4#6*##\"! %$##  $\"#  \"#  *) \"7g*# \"7i+X$,U&!7g+>$7&+4%79+*%4#6*##\"! %$##  $\"#  \"#  *) \"7g*# \"7i\"\"\"  +' 4!6+!! %"),
          peg$decode("7**# \"7+"),
          peg$decode("!70+P$72+F%7s+<%7,+2%7t+(%4%6,%!!%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!70+P$72+F%7u+<%7,+2%7u+(%4%6-%!!%$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("! !7k*) \"0.\"\"1!3/+2$,/&7k*) \"0.\"\"1!3/\"\"\"  +' 4!60!! %"),
          peg$decode("7.*# \"7/"),
          peg$decode("!70+7$73+-%7g+#%'#%$##  $\"#  \"#  "),
          peg$decode("!70+7$74+-%7g+#%'#%$##  $\"#  \"#  "),
          peg$decode("!.1\"\"2132+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.3\"\"2334+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.5\"\"2536+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.7\"\"2738+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.9\"\"293:+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.;\"\"2;3<+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.=\"\"2=3>+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.?\"\"2?3@+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("!.A\"\"2A3B+-$79+#%'\"%$\"#  \"#  "),
          peg$decode("! !7;*) \"7=*# \"7>,/&7;*) \"7=*# \"7>\"+' 4!6C!! %"),
          peg$decode("! !7<*) \"7=*# \"7>,/&7<*) \"7=*# \"7>\"+' 4!6C!! %"),
          peg$decode("!0D\"\"1!3E+' 4!6(!! %"),
          peg$decode("!0F\"\"1!3G+' 4!6(!! %"),
          peg$decode("!.H\"\"2H3I+\x9C$ !!!8.K\"\"2K3L9*$$\"\" J\"#  +-$7w+#%'\"%$\"#  \"#  ,L&!!8.K\"\"2K3L9*$$\"\" J\"#  +-$7w+#%'\"%$\"#  \"#  \"+8%.K\"\"2K3L+(%4#6M#!!%$##  $\"#  \"#  "),
          peg$decode("!.N\"\"2N3O+\x8C$ !!!8.P\"\"2P3Q9*$$\"\" J\"#  +-$7w+#%'\"%$\"#  \"#  ,L&!!8.P\"\"2P3Q9*$$\"\" J\"#  +-$7w+#%'\"%$\"#  \"#  \"+(%4\"6M\"! %$\"#  \"#  "),
          peg$decode("!.R\"\"2R3S+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.T\"\"2T3U+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.V\"\"2V3W+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.X\"\"2X3Y+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.Z\"\"2Z3[+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\\\"\"2\\3]+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.^\"\"2^3_+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.`\"\"2`3a+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.b\"\"2b3c+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.?\"\"2?3@+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.d\"\"2d3e+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.f\"\"2f3g+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.h\"\"2h3i+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.j\"\"2j3k+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.l\"\"2l3m+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.;\"\"2;3<+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.n\"\"2n3o+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.p\"\"2p3q+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.r\"\"2r3s+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.t\"\"2t3u+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.v\"\"2v3w+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.x\"\"2x3y+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.z\"\"2z3{+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.|\"\"2|3}+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.~\"\"2~3+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x80\"\"2\x803\x81+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x82\"\"2\x823\x83+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x84\"\"2\x843\x85+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x86\"\"2\x863\x87+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x88\"\"2\x883\x89+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8A\"\"2\x8A3\x8B+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8C\"\"2\x8C3\x8D+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x8E\"\"2\x8E3\x8F+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x90\"\"2\x903\x91+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x92\"\"2\x923\x93+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x94\"\"2\x943\x95+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x96\"\"2\x963\x97+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x98\"\"2\x983\x99+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\x9A\"\"2\x9A3\x9B+J$!87k9*$$\"\" J\"#  +2%7:+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.R\"\"2R3S*\u01F1 \".T\"\"2T3U*\u01E5 \".V\"\"2V3W*\u01D9 \".X\"\"2X3Y*\u01CD \".Z\"\"2Z3[*\u01C1 \".\\\"\"2\\3]*\u01B5 \".^\"\"2^3_*\u01A9 \".`\"\"2`3a*\u019D \".b\"\"2b3c*\u0191 \".?\"\"2?3@*\u0185 \".d\"\"2d3e*\u0179 \".f\"\"2f3g*\u016D \".h\"\"2h3i*\u0161 \".j\"\"2j3k*\u0155 \".l\"\"2l3m*\u0149 \".;\"\"2;3<*\u013D \".n\"\"2n3o*\u0131 \".p\"\"2p3q*\u0125 \".r\"\"2r3s*\u0119 \".t\"\"2t3u*\u010D \".v\"\"2v3w*\u0101 \".x\"\"2x3y*\xF5 \".z\"\"2z3{*\xE9 \".|\"\"2|3}*\xDD \".~\"\"2~3*\xD1 \".\x80\"\"2\x803\x81*\xC5 \".\x82\"\"2\x823\x83*\xB9 \".\x84\"\"2\x843\x85*\xAD \".\x86\"\"2\x863\x87*\xA1 \".\x88\"\"2\x883\x89*\x95 \".\x8A\"\"2\x8A3\x8B*\x89 \".\x8C\"\"2\x8C3\x8D*} \".\x8E\"\"2\x8E3\x8F*q \".\x90\"\"2\x903\x91*e \".\x92\"\"2\x923\x93*Y \".\x94\"\"2\x943\x95*M \".\x9C\"\"2\x9C3\x9D*A \".\x96\"\"2\x963\x97*5 \".\x98\"\"2\x983\x99*) \".\x9A\"\"2\x9A3\x9B+@$!87k9*$$\"\" J\"#  +(%4\"6(\"!!%$\"#  \"#  "),
          peg$decode("!!87f9*$$\"\" J\"#  +P$7j+F% !7k,#&7k\"+4%79+*%4$6\x9E$#\"! %$$#  $##  $\"#  \"#  "),
          peg$decode("!7f*i \"!!87j9*$$\"\" J\"#  +P$!80\x9F\"\"1!3\xA09*$$\"\" J\"#  +2%7w+(%4#6(#! %$##  $\"#  \"#  +3$79+)%4\"6\xA1\"\"! %$\"#  \"#  "),
          peg$decode("!7f*i \"!!87j9*$$\"\" J\"#  +P$!80\xA2\"\"1!3\xA39*$$\"\" J\"#  +2%7w+(%4#6(#! %$##  $\"#  \"#  +3$79+)%4\"6\xA1\"\"! %$\"#  \"#  "),
          peg$decode("0\xA4\"\"1!3\xA5*; \"0\xA6\"\"1!3\xA7*/ \"0\xA8\"\"1!3\xA9*# \"7l"),
          peg$decode("0\xA4\"\"1!3\xA5*G \"0\xA6\"\"1!3\xA7*; \"0\xAA\"\"1!3\xAB*/ \"0\xA8\"\"1!3\xA9*# \"7l"),
          peg$decode("!.\xAC\"\"2\xAC3\xAD+2$7n+(%4\"6\xAE\"! %$\"#  \"#  *C \"!.\xAF\"\"2\xAF3\xB0+2$7m+(%4\"6\xAE\"! %$\"#  \"#  "),
          peg$decode("!!7o+i$7o+_%7o+U%7o+K%7o+A%7o+7%7o+-%7o+#%'(%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  +' 4!6\xB1!! %"),
          peg$decode("!!7o+A$7o+7%7o+-%7o+#%'$%$$#  $##  $\"#  \"#  +' 4!6\xB1!! %"),
          peg$decode("0\xB2\"\"1!3\xB3*5 \"0\xB4\"\"1!3\xB5*) \"0\xAA\"\"1!3\xAB"),
          peg$decode("!.\xB6\"\"2\xB63\xB7+2$79+(%4\"6(\"!!%$\"#  \"#  "),
          peg$decode("!.\xB8\"\"2\xB83\xB9+2$79+(%4\"6(\"!!%$\"#  \"#  "),
          peg$decode("!.\xBA\"\"2\xBA3\xBB+2$79+(%4\"6(\"!!%$\"#  \"#  "),
          peg$decode("!.\xBC\"\"2\xBC3\xBD+P$!80\xBE\"\"1!3\xBF9*$$\"\" J\"#  +2%79+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\xC0\"\"2\xC03\xC1+P$!80\xBE\"\"1!3\xBF9*$$\"\" J\"#  +2%79+(%4#6(#!\"%$##  $\"#  \"#  "),
          peg$decode("!.\xC2\"\"2\xC23\xC3+2$79+(%4\"6(\"!!%$\"#  \"#  "),
          peg$decode("!87w9*$$\"\" J\"#  "),
          peg$decode("-\"\"1!3\xC4")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


    function addPositionInfo(r){
        var posDetails = peg$computePosDetails(peg$currPos);
        r.line = posDetails.line;
        r.column = posDetails.column;
        r.begin = peg$reportedPos;
        r.end = peg$currPos;
        return r;
    }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
